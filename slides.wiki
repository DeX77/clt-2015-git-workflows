==== Intro ====

* Git-Workflows?

--1cm--

* Folge von Kommandos
* Nutzung von Branches und Tags

==== Was für Workflows ====

* ''push'n'pull''
* ''rebase'n'force-merge''
* ''github-workflow''
* ''gitflow''

==== Push'n'pull Workflow ====

<[center]
<<<images/push-pull.pdf, scale=0.15>>>
[center]>

<[columns]
[[[ 5cm ]]]
_blue_1._ Lokale Änderungen
* @vim ''datei''@
* @git add ''datei''@
* @git commit -m "''msg''"@
[[[ 5.5cm ]]]
_blue_2._ Änderungen veröffentlichen
* @git push@
* Wenn @push@ fehlschlägt
* @git pull@, dann @git push@
% ** @git pull@
% ** @git push@
[columns]>

==== Push'n'pull Workflow -- Resultat ====

<[columns]
[[[ 3cm ]]]
<[center]
<<<images/push-n-pull-result.pdf, scale=0.25>>>
[center]>
[[[ 7cm ]]]
* Vorteile
** Leicht für Anfänger
** Nur weniger Kommandos
--1cm--
* Nachteile
** Es entstehen Merge-Commits
** »Aber wir arbeiten doch alle auf @master@?\!«
** Rebase ist eine Option (für Anfänger?)
[columns]>

==== Push'n'pull Workflow -- Resultat mit @-{}-rebase@ ====

<[columns]
[[[ 3cm ]]]
<[center]
<<<images/push-n-pull-rebase-result.pdf, scale=0.25>>>
[center]>
[[[ 7cm ]]]
* Vorteile
** Keine Merge-Commits
--1cm--
* Nachteile
** »Sinnloses« Linearisieren
** Feature-Commits in zufälliger Reihenfolge
[columns]>

==== Github-Flow ====

* Geeignet für Github
* Webinterface oder 'github' Kommandozeilenerweiterung
* Nutzt Feature-Branches

==== Github-Flow ====

<[center]
<<<images/github-workflow.pdf, scale=0.28>>>
[center]>

<[columns]
[[[ 5.75cm ]]]
'''Entwickler''': \\
_cyan_1._ forkt ein Repository \\
_cyan_2._ klont seinen Fork und macht Commits in einem Feature-Branch \\
_cyan_3._ pusht den Feature-Branch in seinen Fork \\
_cyan_4._ eröffnet einen Pull-Request \\
[[[ 6cm ]]]
'''Autor''': \\
_cyan_5._ fetcht den Feature-Branch und mergt ihn \\
_cyan_6._ pusht ins Orginal \\
'''oder''' \\
_cyan_7._ mergt den Pull-Request über das Webinterface \\
[columns]>


==== Rebase'n'Force-Merge ====

TODO

==== Rebase'n'Force-Merge ====

TODO

==== Gitflow ====

TODO
