==== Intro ====

* Git-Workflows?

--1cm--

* Folge von Kommandos
* Nutzung von Branches und Tags

==== Was für Workflows ====

* ''push'n'pull''
* ''rebase'n'force-merge''
* ''github-workflow''
* ''gitflow''

==== Push'n'pull Workflow ====

<[center]
<<<images/push-pull.pdf, scale=0.15>>>
[center]>

<[columns]
[[[ 5cm ]]]
_blue_1._ Lokale Änderungen
* @vim ''datei''@
* @git add ''datei''@
* @git commit -m "''msg''"@
[[[ 5.5cm ]]]
_blue_2._ Änderungen veröffentlichen
* @git push@
* Wenn @push@ fehlschlägt
* @git pull@, dann @git push@
% ** @git pull@
% ** @git push@
[columns]>

==== Push'n'pull Workflow -- Resultat ====

<[columns]
[[[ 3cm ]]]
<[center]
<<<images/push-n-pull-result.pdf, scale=0.25>>>
[center]>
[[[ 7cm ]]]
* Vorteile
** Leicht für Anfänger
** Nur weniger Kommandos
--1cm--
* Nachteile
** Es entstehen Merge-Commits
** »Aber wir arbeiten doch alle auf @master@?\!«
** Rebase ist eine Option (für Anfänger?)
[columns]>

==== Push'n'pull Workflow -- Resultat mit @-{}-rebase@ ====

<[columns]
[[[ 3cm ]]]
<[center]
<<<images/push-n-pull-rebase-result.pdf, scale=0.25>>>
[center]>
[[[ 7cm ]]]
* Vorteile
** Keine Merge-Commits
--1cm--
* Nachteile
** »Sinnloses« Linearisieren
** Feature-Commits in zufälliger Reihenfolge
[columns]>

==== Github-Flow ====

* Geeignet für Github
* Webinterface oder 'github' Kommandozeilenerweiterung
* Nutzt Feature-Branches

==== Github-Flow ====

<[center]
<<<images/github-workflow.pdf, scale=0.3>>>
[center]>

<[columns]
[[[ 5.75cm ]]]
'''Entwickler''': \\
_cyan_1._ forkt ein Repository \\
_cyan_2._ klont seinen Fork und macht Commits in einem Feature-Branch \\
_cyan_3._ pusht den Feature-Branch in seinen Fork \\
_cyan_4._ eröffnet einen Pull-Request \\
[[[ 6cm ]]]
'''Autor''': \\
_cyan_5._ fetcht den Feature-Branch und mergt ihn \\
_cyan_6._ pusht ins Orginal \\
'''oder''' \\
_cyan_7._ mergt den Pull-Request über das Webinterface \\
[columns]>

==== Github-Flow -- Resultat ====

<[columns]
[[[ 3cm ]]]
<[center]
<<<images/githubflow-resultat.pdf, scale=0.20>>>
[center]>
[[[ 7cm ]]]
* Vorteile
** Feature-Branches
--1cm--
* Nachteile
** Feature-Branches basieren vor dem Merge evtl. nicht auf dem aktuellsten Master
** »Durcheinander«
[columns]>

==== Github-Flow -- Anmerkungen ====

* Beim Merge von Pull-Requests wird der Merge-Commit automatisch forciert
* Weitere Schritte vom Entwickler nötig
** Feature-Branches löschen
** Synchronisation vom @master@ im Fork mit Original

==== Rebase 'n' Force-Merge Workflow ====

<[center]
<<<images/rebase-force.pdf, scale=0.17>>>
[center]>

==== Beschreibung der Schritte ====

<[columns]
[[[ 6.5cm ]]]
\begin{enumerate}
\item '''Repsoitory clonen:'''\\
    @git clone <url>@
\item '''Feature-Branch anlegen'''\\
    @git checkout -b feature@
\item '''Arbeiten:'''\\
    @vim datei@\\
    @git add@\\
    @git commit@
\item '''Getaene Arbeit hochladen'''\\
    @\# beim ersten Mal@\\
    @git push origin -u feature@\\
    @git push@
\item '''Lokalen @master@ aktualisieren:'''\\
    @git checkout master@\\
    @git pull@
\end{enumerate}
[[[ 6.5cm ]]]
\begin{enumerate}
\setcounter{enumi}{5}
\item '''Rebase @feature@ auf @master@:'''\\
    @git checkout feature@\\
    @git rebase master@
\item '''Forcierter Merge von @feature@:'''\\
    @git checkout master@\\
    @git merge -{}-no-ff feature@
\item '''@master@  Hochladen:'''\\
    @git push@
\item '''Fehlschlag: Merge rückgängig:'''\\
    @git reset -{}-hard HEAD\^@\\
\item '''Erfolg: @feature@ löschen,\\lokal und remote:'''\\
    @git branch -d feature@\\
    @git push origin :feature@
\end{enumerate}
[columns]>

==== Rebase 'n' Force-Merge -- Resultat ====

<[columns]
[[[ 3cm ]]]
<[center]
<<<images/rebase-n-force-result.pdf, scale=0.16>>>
[center]>
[[[ 7cm ]]]
* Vorteile
** Saubere history
** Feature-Branches
** Merges sinnvoll
--1cm--
* Nachteile
** Verständnis von Git gebraucht
** Mehrere Kommandos nötig
[columns]>

==== Rebase'n'Force-Merge ====

TODO

==== Rebase'n'Force-Merge ====

TODO

==== Gitflow ====

TODO
